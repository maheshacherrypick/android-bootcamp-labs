= Lab 17.0 â€“ Content Providers (optional)

== Objective

By the time this lab is complete, our Yamba app will implement and utilize a content provider.

== Overview

In this lab, we will cover the following concepts:

* Implementing an SQLite database

** CRUD layer

* Implementing  a content provider

** Understanding the contracts between content provider and data source

== Setup

Prior labs have been completed.

== Detailed Steps

. Create a class containing all of the constants that will be used.
+
[source, java]
.StatusContract.java
----
public class StatusContract {

	// DB specific constants
	public static final String DB_NAME = "timeline.db";
	public static final int DB_VERSION = 1;
	public static final String TABLE = "status";

	// Provider specific constants
	// content://com.thenewcircle.android.yamba.StatusProvider/status
	public static final String AUTHORITY = "com.thenewcircle.yamba.StatusProvider";
	public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + TABLE);
	public static final int STATUS_ITEM = 1;
	public static final int STATUS_DIR = 2;
	public static final String STATUS_TYPE_ITEM = "vnd.android.cursor.item/vnd.com.thenewcircle.yamba.provider.status";
	public static final String STATUS_TYPE_DIR = "vnd.android.cursor.dir/vnd.com.thenewcircle.yamba.provider.status";
	public static final String DEFAULT_SORT = Column.CREATED_AT + " DESC";  // Descending

	public class Column {
		public static final String ID = BaseColumns._ID;  // "_id"
		public static final String USER = "user";
		public static final String MESSAGE = "message";
		public static final String CREATED_AT = "created_at";
	}
}
----

. Create SQLite Open Helper.
+
[source, java]
.DbHelper.java
----
public class DbHelper extends SQLiteOpenHelper {

  private static final String TAG = DbHelper.class.getSimpleName();

  public static final String DB_NAME = "timeline.db";
	public static final int DB_VERSION = 1;

  public DbHelper(Context context) {
    super(context, DB_NAME, null, DB_VERSION);
  }

}
----

. Implement the +onCreate+ method
+
[source, java]
.DbHelper.java
----
// Called only once first time we create the database
@Override
public void onCreate(SQLiteDatabase db) {
	String sql = String
			.format("create table %s (%s int primary key, %s text, %s text, %s int)",
					StatusContract.TABLE, StatusContract.Column.ID,
					StatusContract.Column.USER,
					StatusContract.Column.MESSAGE,
					StatusContract.Column.CREATED_AT);
	Log.d(TAG, "onCreate with SQL: "+sql);
	db.execSQL(sql);
}
----

. Implement the +onUpgrade+ method
+
[source, java]
.DbHelper.java
----
// Gets called whenever existing version != new version, i.e. schema changed
@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	// Typically you do ALTER TABLE ...
	db.execSQL("drop table if exists " + StatusContract.TABLE);
	onCreate(db);
}
----

. Create the Content Provier class.  
It will act as a wrapper around the database and will expose the CRUD methods.
+
[source, java]
.StatusProvider.java
----
public class StatusProvider extends ContentProvider {

  private static final String TAG = StatusProvider.class.getSimpleName();

}
----

. Implement the +onCreate+ method.
Create the connection to the database.
+
[source, java]
.StatusProvider.java
----
private DbHelper dbHelper;

@Override
public boolean onCreate() {
	dbHelper = new DbHelper(getContext());
	Log.d(TAG, "onCreated");
	return false;
}
----

. Implement the URI Matcher.  This method analyses the incoming URI
to verify that the URI corresponds to the CRUD operation.
+
[source, java]
.StatusProvider.java
----
private static final UriMatcher sURIMatcher = new UriMatcher(
		UriMatcher.NO_MATCH);

static {
	sURIMatcher.addURI(StatusContract.AUTHORITY, StatusContract.TABLE,
			StatusContract.STATUS_DIR);
	sURIMatcher.addURI(StatusContract.AUTHORITY, StatusContract.TABLE
			+ "/#", StatusContract.STATUS_ITEM);
}
----

. Implement +getType+ which returns the data type for the requested operation.
+
[source, java]
.StatusProvider.java
----
@Override
public String getType(Uri uri) {
	switch (sURIMatcher.match(uri)) {
	case StatusContract.STATUS_DIR:
		Log.d(TAG, "gotType: " + StatusContract.STATUS_TYPE_DIR);
		return StatusContract.STATUS_TYPE_DIR;
	case StatusContract.STATUS_ITEM:
		Log.d(TAG, "gotType: " + StatusContract.STATUS_TYPE_ITEM);
		return StatusContract.STATUS_TYPE_ITEM;
	default:
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}
}
----

. Implement the +insert+ operation.
+
[source, java]
.StatusProvider.java
----
@Override
public Uri insert(Uri uri, ContentValues values) {
	Uri ret = null;

	// Assert correct uri
	if (sURIMatcher.match(uri) != StatusContract.STATUS_DIR) {
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}

	SQLiteDatabase db = dbHelper.getWritableDatabase();
	long rowId = db.insertWithOnConflict(StatusContract.TABLE, null,
			values, SQLiteDatabase.CONFLICT_IGNORE);

	// Was insert successful?
	if (rowId != -1) {
		long id = values.getAsLong(StatusContract.Column.ID);
		ret = ContentUris.withAppendedId(uri, id);
		Log.d(TAG, "inserted uri: " + ret);
		
		// Notify that data for this uri has changed
		getContext().getContentResolver().notifyChange(uri, null);
	}

	return ret;
}
----

. Implement the +query+ operation.
+
[source, java]
.StatusProvider.java
----
// SELECT username, message, created_at FROM status WHERE user='bob' ORDER
// BY created_at DESC;
@Override
public Cursor query(Uri uri, String[] projection, String selection,
		String[] selectionArgs, String sortOrder) {

	SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
	qb.setTables( StatusContract.TABLE );

	switch (sURIMatcher.match(uri)) {
	case StatusContract.STATUS_DIR:
		break;
	case StatusContract.STATUS_ITEM:
		qb.appendWhere(StatusContract.Column.ID + "="
				+ uri.getLastPathSegment());
		break;
	default:
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}

	String orderBy = (TextUtils.isEmpty(sortOrder)) ? StatusContract.DEFAULT_SORT
			: sortOrder;
	
	SQLiteDatabase db = dbHelper.getReadableDatabase();
	Cursor cursor = qb.query(db, projection, selection, selectionArgs, null, null, orderBy);
	
	// register for uri changes
	cursor.setNotificationUri(getContext().getContentResolver(), uri); 
	
	Log.d(TAG, "queried records: "+cursor.getCount());
	return cursor;
}
----

. Implement the +update+ operation.
+
[source, java]
.StatusProvider.java
----
@Override
public int update(Uri uri, ContentValues values, String selection,
		String[] selectionArgs) {
	String where;

	switch (sURIMatcher.match(uri)) {
	case StatusContract.STATUS_DIR:
		// so we count updated rows
		where = selection;
		break;
	case StatusContract.STATUS_ITEM:
		long id = ContentUris.parseId(uri);
		where = StatusContract.Column.ID
				+ "="
				+ id
				+ (TextUtils.isEmpty(selection) ? "" : " and ( "
						+ selection + " )");
		break;
	default:
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}

	SQLiteDatabase db = dbHelper.getWritableDatabase();
	int ret = db.update(StatusContract.TABLE, values, where, selectionArgs);

	if(ret>0) {
		// Notify that data for this uri has changed
		getContext().getContentResolver().notifyChange(uri, null);
	}
	Log.d(TAG, "updated records: " + ret);
	return ret;
}
----

. Implement the +delete+ operation.
+
[source, java]
.StatusProvider.java
----
// Implement Purge feature
// Use db.delete()
// DELETE FROM status WHERE id=? AND user='?'
// uri: content://com.thenewcircle.yamba.StatusProvider/status/47
@Override
public int delete(Uri uri, String selection, String[] selectionArgs) {
	String where;

	switch (sURIMatcher.match(uri)) {
	case StatusContract.STATUS_DIR:
		// so we count deleted rows
		where = (selection == null) ? "1" : selection;
		break;
	case StatusContract.STATUS_ITEM:
		long id = ContentUris.parseId(uri);
		where = StatusContract.Column.ID
				+ "="
				+ id
				+ (TextUtils.isEmpty(selection) ? "" : " and ( "
						+ selection + " )");
		break;
	default:
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}

	SQLiteDatabase db = dbHelper.getWritableDatabase();
	int ret = db.delete(StatusContract.TABLE, where, selectionArgs);

	if(ret>0) {
		// Notify that data for this uri has changed
		getContext().getContentResolver().notifyChange(uri, null);
	}
	Log.d(TAG, "deleted records: " + ret);
	return ret;
}
----

. Test the content provider.    
Use the +ProviderTestCase2+ unit test class provided by the Android
testing framework.
+
[source, java]
.StatusProviderTest.java
----
public class StatusProviderTest extends ProviderTestCase2<StatusProvider> {

    public ContentProviderTest() {
        super(StatusProvider.class, StatusContract.AUTHORITY);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        getMockContentResolver().addProvider(StatusContract.AUTHORITY, getProvider());
    }

    public void testInsertItem() {

        ContentValues values = new ContentValues();

        values.put(StatusContract.Column.ID, 100);
        values.put(StatusContract.Column.USER, "Test User");
        values.put(StatusContract.Column.MESSAGE, "My tweet");
        values.put(StatusContract.Column.CREATED_AT, new Date().getTime());

        Uri uri = getMockContentResolver().insert(StatusContract.CONTENT_URI, values);

        Cursor cursor = getMockContentResolver().query(uri, null, null, null, null);
        assertEquals(1, cursor.getCount());
        // move to first row
        cursor.moveToNext();
        assertEquals("My tweet", cursor.getString(cursor.getColumnIndex("message")));
    }

}
----
+
NOTE: The instructor will provide a demo of unit test configuration.

. Insert the YambaStatus objects into the content provider.
This should be done in the +TimelineService+ in the loop that processes the
data returned from the yamba server.
+
[source, java]
.TimelineService.java
----
ContentValues values = new ContentValues();

values.put(StatusContract.Column.ID, status.getId());
values.put(StatusContract.Column.USER, status.getUser());
values.put(StatusContract.Column.MESSAGE, status.getMessage());
values.put(StatusContract.Column.CREATED_AT, status.getCreatedAt().getTime());

Uri uri = getContentResolver().insert(StatusContract.CONTENT_URI, values);
----

. Add a menu option for removing the statuses from the content provider.
Use the following code to delete all rows.
+
[source, java]
----
int rows = getContentResolver().delete(StatusContract.CONTENT_URI, null, null);
----


. View the database on the device

.. Open the database and run SQL against it. You can find out how to use the tools at the following URLs.
+
<http://developer.android.com/guide/developing/tools/adb.html>
+
http://developer.android.com/guide/developing/tools/sqlite3.html
+
http://www.sqlite.org/cli.html

.. Change to the tools directory. The tools are in "<sdk_home>/platform-tools"

.. Start the adb shell
+
----
adb shell
----
+
You should see a "\#" prompt on the command line.
+
Note: Mac users should run the following command (in the correct directory) instead:
+
----
./adb shell
----

.. Start the sqlite admin shell
+
----
sqlite3 /data/data/com.thenewcircle.yamba/databases/timeline.db
----
+
You should see a "sqlite>" prompt on the command line.

.. Verify that the data is in the database
+
----
.schema status
select * from status;
----

.. Exit both shells.
+
----
.exit
exit
----

