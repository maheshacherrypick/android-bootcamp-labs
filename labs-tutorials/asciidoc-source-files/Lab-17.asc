= Lab 17.0 â€“ Content Providers (optional)

== Objective

By the time this lab is complete, our Yamba app will implement and utilize a content provider.

== Overview

In this lab, we will cover the following concepts:

* Implementing an SQLite database

** CRUD layer

* Implementing  a content provider

** Understanding the contracts between content provider and data source

== Setup

Lab 15.0 has been completed.

== Detailed Steps

[start=1]
. Create SQLite Open Helper +com.thenewcircle.yamba+.

[source, java]
.DbHelper.java
----
public class DbHelper extends SQLiteOpenHelper {

  private static final String TAG = DbHelper.class.getSimpleName();

  public static final String DB_NAME = "timeline.db";
	public static final int DB_VERSION = 1;

  public DbHelper(Context context) {
    super(context, DB_NAME, null, DB_VERSION);
  }

}
----

TIP: You may want to put your constants in a special class (i.e. +YambaConstants+)

[start=3]
. Implement the +onCreate+ method

[source, java]
.DbHelper.java
----
public static final String TABLE = "status";

public class Column {
	public static final String ID = BaseColumns._ID;
	public static final String USER = "user";
	public static final String MESSAGE = "message";
	public static final String CREATED_AT = "created_at";
}

// Called only once first time we create the database
@Override
public void onCreate(SQLiteDatabase db) {
	String sql = String
			.format("create table %s (%s int primary key, %s text, %s text, %s int)",
					TABLE, Column.ID,
					Column.USER,
					Column.MESSAGE,
					Column.CREATED_AT);
	Log.d(TAG, "onCreate with SQL: "+sql);
	db.execSQL(sql);
}
----

[start=3]
. Implement the +onUpgrade+ method

[source, java]
.DbHelper.java
----
// Gets called whenever existing version != new version, i.e. schema changed
@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	// Typically you do ALTER TABLE ...
	db.execSQL("drop table if exists " + TABLE);
	onCreate(db);
}
----

[start=4]
. Implement Content Provier

[source, java]
.StatusProvider.java
----
public class StatusProvider extends ContentProvider {

  private static final String TAG = StatusProvider.class.getSimpleName();
  private DbHelper dbHelper;

}
----

[start=4]
. Implement the +onCreate+ method

[source, java]
.StatusProvider.java
----
	@Override
	public boolean onCreate() {
		dbHelper = new DbHelper(getContext());
		Log.d(TAG, "onCreated");
		return false;
	}
----

[start=5]
. Implement the URI Matcher

[source, java]
.StatusProvider.java
----
public static final String TABLE = "status";
public static final String AUTHORITY = "com.thenewcircle.yamba.StatusProvider";
public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY	+ "/" + TABLE);
public static final int STATUS_ITEM = 1;

private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);

static {
	  sURIMatcher.addURI(AUTHORITY, TABLE, STATUS_DIR);
	  sURIMatcher.addURI(AUTHORITY, TABLE		+ "/#", STATUS_ITEM);
}
----

[start=6]
. Implement getType

[source, java]
.StatusProvider.java
----

public static final int STATUS_ITEM = 1;
public static final int STATUS_DIR = 2;
public static final String STATUS_TYPE_ITEM = "vnd.android.cursor.item/vnd.com.thenewcircle.yamba.provider.status";
public static final String STATUS_TYPE_DIR = "vnd.android.cursor.dir/vnd.com.thenewcircle.yamba.provider.status";

@Override
public String getType(Uri uri) {
	switch (sURIMatcher.match(uri)) {
	case STATUS_DIR:
		Log.d(TAG, "gotType: " + STATUS_TYPE_DIR);
		return STATUS_TYPE_DIR;
	case STATUS_ITEM:
		Log.d(TAG, "gotType: " + STATUS_TYPE_ITEM);
		return STATUS_TYPE_ITEM;
	default:
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}
}
----


[start=6]
. Implement insert

[source, java]
.StatusProvider.java
----
@Override
public Uri insert(Uri uri, ContentValues values) {
	Uri ret = null;

	// Assert correct uri
	if (sURIMatcher.match(uri) != STATUS_DIR) {
		throw new IllegalArgumentException("Illegal uri: " + uri);
	}

	SQLiteDatabase db = dbHelper.getWritableDatabase();
	long rowId = db.insertWithOnConflict(TABLE, null,
			values, SQLiteDatabase.CONFLICT_IGNORE);

	// Was insert successful?
	if (rowId != -1) {
		long id = values.getAsLong(ContentConstants.Column.ID);
		ret = ContentUris.withAppendedId(uri, id);
		Log.d(TAG, "inserted uri: " + ret);

		// Notify that data for this uri has changed
		getContext().getContentResolver().notifyChange(uri, null);
	}

	return ret;
}
----

[start=7]
. Implement update

[start=8]
. Implement delete

[start=9]
. Implement query

[start=10]
. Use content provider.  Insert the YambaStatus objects into the content provider.
This should be done in the refresh service.

[source, java]
.TimelineService.jva
----
ContentValues values = new ContentValues();

values.put(YambaConstants.Column.ID, status.getId());
values.put(YambaConstants.Column.USER, status.getUser());
values.put(YambaConstants.Column.MESSAGE, status.getMessage());
values.put(YambaConstants.Column.CREATED_AT, status.getCreatedAt().getTime());

Uri uri = getContentResolver().insert(YambaConstants.CONTENT_URI, values);
----
